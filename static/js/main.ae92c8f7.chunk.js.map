{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","buttonSelect","setButtonSelect","xdimension","setXdimension","zdimension","setZdimension","ydimension","setYdimension","floors","setFloors","doors","setDoors","windows","setWindows","windHeight","setWindHeight","windWidth","setWindWidth","CalculateResult","widthWalls","lengthWalls","doorSize","windowSize","floorArea","onClick","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAwNeA,EArNH,WACV,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAA4BR,mBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BV,mBAAS,GAAnC,mBAAOW,EAAP,KAAcC,EAAd,KACA,EAA8BZ,mBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAoCd,mBAAS,GAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KACA,EAAkChB,mBAAS,GAA3C,mBAAOiB,EAAP,KAAkBC,EAAlB,KAcMC,EAAkB,WACtB,IAAIC,EAAgC,GAAlBjB,EAAa,GAC3BkB,EAAiC,GAAlBhB,EAAa,GAC5BiB,EAAmB,EAARX,EACXY,EAAaN,EAAYF,EAAaF,EACtCW,GAAarB,EAAa,IAAME,EAAa,GAEjD,OACE,gCACE,+FAAmEe,EAAaC,GAAed,EAAce,EAAWC,KACxH,sFAAyDC,EAAYf,KACrE,4FAA+DN,EAAa,IAAME,EAAa,MAE/F,wBAAQoB,QAAS,kBAxBrBrB,EAAc,GACdE,EAAc,GACdE,EAAc,GACdE,EAAU,GACVE,EAAS,GACTE,EAAW,GACXE,EAAc,GACdE,EAAa,QACbhB,EAAgB,IAgBZ,0BAiKN,OACE,sBAAKwB,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,+EACA,sGACA,4EAEF,qBAAKA,UAAU,cAAf,SA5CkB,GAAhBzB,EAEF,8BAlBA,sBAAKyB,UAAU,YAAf,UACE,wCAAWvB,EAAX,MAA0BE,EAA1B,MAAyCE,KACzC,yCAAYE,KACZ,wCAAWE,KACX,0CAAaE,EAAb,aAAgCI,EAAhC,MAA8CF,EAA9C,OACA,8EACA,wBAAQU,QAAS,kBAAMvB,EAAgB,IAAvC,mBACA,wBAAQuB,QAAS,kBAAMvB,EAAgB,IAAvC,8BACA,wBAAQuB,QAAS,kBAAMvB,EAAgB,IAAvC,qBACA,gGACA,wBAAQuB,QAAS,kBAAMvB,EAAgB,IAAvC,4BAagB,GAAhBD,EAEF,8BA9HA,gCACE,gCACE,4EACA,gCACE,4BAAIE,IACJ,wBAAQsB,QAAS,kBAAMrB,EAAcD,EAAW,IAAhD,eACA,wBAAQsB,QAAS,kBAAMrB,EAAcD,EAAW,IAAhD,qBAIJ,gCACE,uEACA,gCACE,4BAAIE,IACJ,wBAAQoB,QAAS,kBAAMnB,EAAcD,EAAW,IAAhD,eACA,wBAAQoB,QAAS,kBAAMnB,EAAcD,EAAW,IAAhD,qBAIJ,gCACE,uEACA,gCACE,4BAAIE,IACJ,wBAAQkB,QAAS,kBAAMjB,EAAcD,EAAW,IAAhD,eACA,wBAAQkB,QAAS,kBAAMjB,EAAcD,EAAW,IAAhD,qBAIJ,0GACA,wBAAQkB,QAAS,kBAAMvB,EAAgB,IAAvC,yBAsGgB,GAAhBD,EAEF,8BAjGA,gCACE,gCACE,yEACA,gCACE,4BAAIQ,IACJ,wBAAQgB,QAAS,kBAAMf,EAAUD,EAAO,IAAxC,eACA,wBAAQgB,QAAS,kBAAMf,EAAUD,EAAO,IAAxC,qBAIJ,gCACE,wEACA,gCACE,4BAAIE,IACJ,wBAAQc,QAAS,kBAAMb,EAASD,EAAM,IAAtC,eACA,wBAAQc,QAAS,kBAAMb,EAASD,EAAM,IAAtC,qBAIJ,0GACA,wBAAQc,QAAS,kBAAMvB,EAAgB,IAAvC,yBAkFgB,GAAhBD,EAEF,8BA5EA,gCACE,gCACE,0EACA,gCACE,4BAAIY,IACJ,wBAAQY,QAAS,kBAAMX,EAAWD,EAAQ,IAA1C,eACA,wBAAQY,QAAS,kBAAMX,EAAWD,EAAQ,IAA1C,qBAIJ,gCACE,uEACA,gCACE,4BAAII,IACJ,wBAAQQ,QAAS,kBAAMP,EAAaD,EAAU,IAA9C,eACA,wBAAQQ,QAAS,kBAAMP,EAAaD,EAAU,IAA9C,qBAIJ,gCACE,uEACA,gCACE,4BAAIF,IACJ,wBAAQU,QAAS,kBAAMT,EAAcD,EAAW,IAAhD,eACA,wBAAQU,QAAS,kBAAMT,EAAcD,EAAW,IAAhD,qBAIJ,0GACA,wBAAQU,QAAS,kBAAMvB,EAAgB,IAAvC,yBAoDgB,GAAhBD,EAEA,8BACCkB,WAHL,QCnLWQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ae92c8f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nconst App = () => {\n  const [buttonSelect, setButtonSelect] = useState(0);\n  const [xdimension, setXdimension] = useState(0);\n  const [zdimension, setZdimension] = useState(0);\n  const [ydimension, setYdimension] = useState(0);\n  const [floors, setFloors] = useState(0);\n  const [doors, setDoors] = useState(0);\n  const [windows, setWindows] = useState(0);\n  const [windHeight, setWindHeight] = useState(0);\n  const [windWidth, setWindWidth] = useState(0);\n\n  const ClearNumbers = () => {\n    setXdimension(0);\n    setZdimension(0);\n    setYdimension(0);\n    setFloors(0);\n    setDoors(0);\n    setWindows(0);\n    setWindHeight(0);\n    setWindWidth(0);\n    setButtonSelect(0);\n  }\n\n  const CalculateResult = () => {\n    let widthWalls = (xdimension - 1) * 2\n    let lengthWalls = (zdimension - 1) * 2\n    let doorSize = doors * 2\n    let windowSize = windWidth * windHeight * windows\n    let floorArea = (xdimension - 2) * (zdimension - 2)\n\n    return(\n      <div>\n        <p>The amount of blocks you'll need for the external walls are: {((widthWalls + lengthWalls) * ydimension) - doorSize - windowSize}</p>\n        <p>The amount of blocks you'll need for the floors are: {floorArea * floors}</p>\n        <p>The amount of blocks you'll likely need for the roof are: {(xdimension + 2) * (zdimension + 2)}</p>\n        \n        <button onClick={() => ClearNumbers()}>Go Again</button>\n      </div>\n    )\n  }\n\n  const wallDimensions = () => {\n    return(\n      <div>\n        <div>\n          <p>How many blocks long/deep is your building?</p>\n          <div>\n            <p>{xdimension}</p>\n            <button onClick={() => setXdimension(xdimension-1)}>-</button>\n            <button onClick={() => setXdimension(xdimension+1)}>+</button>\n          </div>\n        </div>\n\n        <div>\n          <p>How many blocks wide is your building?</p>\n          <div>\n            <p>{zdimension}</p>\n            <button onClick={() => setZdimension(zdimension-1)}>-</button>\n            <button onClick={() => setZdimension(zdimension+1)}>+</button>\n          </div>\n        </div>\n\n        <div>\n          <p>How many blocks high is your building?</p>\n          <div>\n            <p>{ydimension}</p>\n            <button onClick={() => setYdimension(ydimension-1)}>-</button>\n            <button onClick={() => setYdimension(ydimension+1)}>+</button>\n          </div>\n        </div>\n        \n        <p>-------------------------------------------------------------------------</p>\n        <button onClick={() => setButtonSelect(0)}>Submit</button>\n      </div>\n    )\n}\n\n  const floorsAndDoors = () => {\n    return(\n      <div>\n        <div>\n          <p>How many floors does your building have?</p>\n          <div>\n            <p>{floors}</p>\n            <button onClick={() => setFloors(floors-1)}>-</button>\n            <button onClick={() => setFloors(floors+1)}>+</button>\n          </div>\n        </div>\n\n        <div>\n          <p>How many doors does your building have?</p>\n          <div>\n            <p>{doors}</p>\n            <button onClick={() => setDoors(doors-1)}>-</button>\n            <button onClick={() => setDoors(doors+1)}>+</button>\n          </div>\n        </div>\n\n        <p>-------------------------------------------------------------------------</p>\n        <button onClick={() => setButtonSelect(0)}>Submit</button>\n      </div>\n    )\n\n  }\n\n  const windowDimensions = () => {\n    return(\n      <div>\n        <div>\n          <p>How many windows does your building have?</p>\n          <div>\n            <p>{windows}</p>\n            <button onClick={() => setWindows(windows-1)}>-</button>\n            <button onClick={() => setWindows(windows+1)}>+</button>\n          </div>\n        </div>\n\n        <div>\n          <p>How many blocks wide are your windows?</p>\n          <div>\n            <p>{windWidth}</p>\n            <button onClick={() => setWindWidth(windWidth-1)}>-</button>\n            <button onClick={() => setWindWidth(windWidth+1)}>+</button>\n          </div>\n        </div>\n        \n        <div>\n          <p>How many blocks high are your windows?</p>\n          <div>\n            <p>{windHeight}</p>\n            <button onClick={() => setWindHeight(windHeight-1)}>-</button>\n            <button onClick={() => setWindHeight(windHeight+1)}>+</button>\n          </div>\n        </div>\n        \n        <p>-------------------------------------------------------------------------</p>\n        <button onClick={() => setButtonSelect(0)}>Submit</button>\n      </div>\n    )\n\n  }\n\n  const UserInterface = () => {\n    return (\n      <div className=\"Interface\">\n        <p>walls: {xdimension} x {zdimension} x {ydimension}</p>\n        <p>floors: {floors}</p>\n        <p>doors: {doors}</p>\n        <p>windows: {windows} windows ({windWidth} x {windHeight})</p>\n        <p>Please enter the dimensions of your building:</p>\n        <button onClick={() => setButtonSelect(1)}>Walls</button>\n        <button onClick={() => setButtonSelect(2)}>Floors and Doors</button>\n        <button onClick={() => setButtonSelect(3)}>Windows</button>\n        <p>---------------------------------------------------------------</p>\n        <button onClick={() => setButtonSelect(4)}>Calculate</button>\n      </div>\n    );\n  }\n\n  const pageSelect = () => {\n    if (buttonSelect == 0) {\n      return(\n      <div>\n        {UserInterface()}\n      </div>\n    )\n  }\n    if (buttonSelect == 1) {\n      return(\n      <div>\n        {wallDimensions()}\n      </div>\n    )\n  }\n    if (buttonSelect == 2) {\n      return(\n      <div>\n        {floorsAndDoors()}\n      </div>\n    )\n  }\n    if (buttonSelect == 3) {\n      return(\n      <div>\n        {windowDimensions()}\n      </div>\n    )\n  }\n    if (buttonSelect == 4) {\n      return(\n        <div>\n        {CalculateResult()}\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Intro\">\n        <h1>Welcome to the Minecraft Area Math calculator</h1>\n        <h2>At present this app only calculates for simple rectangular buildings</h2>\n        <h2>and only calculates the external walls.</h2>\n      </div>\n      <div className=\"MainSection\">\n        {pageSelect()}\n      </div>\n    \n    </div>\n  )\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}